{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy import io\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "Coh_ans=np.load('Coh_ans.npy')\n",
    "RT=np.load('RT.npy')\n",
    "Switch=np.load('Switch (Zero-one).npy')\n",
    "motion=np.load('motion.npy')\n",
    "ans=np.load('Total_ans.npy')\n",
    "Coh=np.load('Coh.npy')\n",
    "Conf=np.load('Conf.npy')\n",
    "# ans2=np.load('total_answerI.npy')\n",
    "Envans=np.load('Envans.npy')\n",
    "envexp=np.load('envexp.npy')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 0 0 0 0]\n",
      "[ True False False False  True  True  True]\n",
      "[ 0.   3.2  3.2  3.2  3.2 51.2  0. ]\n",
      "[ 1  1 -1 -1 -1 -1 -1]\n",
      "[-1 -1 -1 -1 -1 -1 -1]\n"
     ]
    }
   ],
   "source": [
    "i=76-3\n",
    "j=76+4\n",
    "ans [i:j]\n",
    "print(Switch[i:j])\n",
    "print(ans [i:j])\n",
    "print(Coh [i:j])\n",
    "print(Envans [i:j])\n",
    "print(envexp [i:j])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "913"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp1R=[]\n",
    "for i in range (len(ans )-1):\n",
    "    if (ans [i-1]==True and ans [i]==False and Switch[i+1]==1 ):\n",
    "        temp1R.append(Conf [i])\n",
    "temp1R=np.array(temp1R)\n",
    "len(temp1R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1321"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp11R=[]\n",
    "for i in range (len(ans )-1):\n",
    "    if (ans [i-1]==True and ans [i]==False and Switch[i]==0 and Switch[i+1]==0 ):\n",
    "        temp11R.append(Conf [i])\n",
    "temp11R=np.array(temp11R)\n",
    "len(temp11R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "663"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp2R=[]\n",
    "hist2=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-2]==True and ans [i-1]==False and ans [i]==False and Switch[i+1]==1 ):\n",
    "#         print(i , Coh [i])\n",
    "        temp2R.append(Conf[i])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist2.append(ts)\n",
    "temp2R=np.array(temp2R)\n",
    "len(hist2)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "217"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp12R=[]\n",
    "hist12=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-2]==True and ans [i-1]==False  and ans [i]==False and Switch[i-1]==0 and Switch[i]==0  and Switch[i+1]==0):\n",
    "#         print(i , Coh [i])\n",
    "        temp12R.append(Conf[i])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist12.append(ts)\n",
    "temp12R=np.array(temp12R)\n",
    "len(temp12R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "246"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp3R=[]\n",
    "hist3=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-3]==True and ans [i-2]==False and ans [i-1]==False and ans [i]==False and Switch[i+1]==1 ):\n",
    "        temp3R.append(Conf[i])\n",
    "        ts.append(Conf[i-2])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist3.append(ts)\n",
    "temp3R=np.array(temp3R)\n",
    "len(hist3)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp13R=[]\n",
    "hist13=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-3]==True and ans [i-2]==False and ans [i-1]==False  and ans [i]==False and Switch[i-2]==0 and Switch[i-1]==0 and Switch[i]==0   and Switch[i+1]==0  ):\n",
    "        temp13R.append(Conf[i])\n",
    "        ts.append(Conf[i-2])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist13.append(ts)\n",
    "temp3R=np.array(temp3R)\n",
    "temp13R=np.array(temp13R)\n",
    "len(temp13R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "96"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp4R=[]\n",
    "hist4=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-4]==True and ans [i-3]==False and ans [i-2]==False and ans [i-1]==False and ans [i]==False and Switch[i+1]==1 ):\n",
    "        temp4R.append(Conf[i])\n",
    "        ts.append(Conf[i-3])\n",
    "#         print(Conf[i-3])\n",
    "        ts.append(Conf[i-2])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "#         print(Conf[i])\n",
    "        hist4.append(ts)\n",
    "#         print(hist4)\n",
    "temp4R=np.array(temp4R)\n",
    "len(temp4R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp14R=[]\n",
    "hist14=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-4]==True and ans [i-3]==False  and ans [i-2]==False and ans [i-1]==False  and ans [i]==False and Switch[i-3]==0 and Switch[i-2]==0 and Switch[i-1]==0 and Switch[i]==0   and Switch[i+1]==0 ):\n",
    "        temp14R.append(Conf[i])\n",
    "        ts.append(Conf[i-3])\n",
    "        ts.append(Conf[i-2])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist14.append(ts)\n",
    "temp14R=np.array(temp14R)\n",
    "len(temp14R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "42"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp5R=[]\n",
    "hist5=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-5]==True and ans [i-4]==False and ans [i-3]==False and ans [i-2]==False and ans [i-1]==False and ans [i]==False and Switch[i+1]==1 ):\n",
    "        temp5R.append(Conf[i])\n",
    "        ts.append(Conf[i-4])\n",
    "        ts.append(Conf[i-3])\n",
    "        ts.append(Conf[i-2])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist5.append(ts)\n",
    "temp5R=np.array(temp5R)\n",
    "len(hist5)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp15R=[]\n",
    "for i in range (len(ans )-1):\n",
    "    if (ans [i-5]==True and ans [i-4]==False and ans [i-3]==False  and ans [i-2]==False and ans [i-1]==False  and ans [i]==False and Switch[i-4]==0 and Switch[i-3]==0 and Switch[i-2]==0 and Switch[i-1]==0 and Switch[i]==0   and Switch[i+1]==0 ):\n",
    "        temp15R.append(Conf[i])\n",
    "temp15R=np.array(temp15R)\n",
    "len(temp15R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp6R=[]\n",
    "hist6=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-6]==True and ans [i-5]==False and ans [i-4]==False and ans [i-3]==False and ans [i-2]==False and ans [i-1]==False and ans [i]==False and Switch[i+1]==1 ):\n",
    "        temp6R.append(Conf[i])\n",
    "        ts.append(Conf[i-5])\n",
    "        ts.append(Conf[i-4])\n",
    "        ts.append(Conf[i-3])\n",
    "        ts.append(Conf[i-2])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist6.append(ts)\n",
    "temp6R=np.array(temp6R)\n",
    "len(hist6)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp16R=[]\n",
    "for i in range (len(ans )-1):\n",
    "    if (ans [i-6]==True and ans [i-5]==False  and ans [i-4]==False and ans [i-3]==False  and ans [i-2]==False and ans [i-1]==False  and ans [i]==False and Switch[i-5]==0  and Switch[i-4]==0 and Switch[i-3]==0 and Switch[i-2]==0 and Switch[i-1]==0 and Switch[i]==0   and Switch[i+1]==0 ):\n",
    "        temp16R.append(Conf[i])\n",
    "temp16R=np.array(temp16R)\n",
    "len(temp16R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.bar( ['SW-Agree'],[ConfSWAgree.mean()],color = '#6569a3',label='Switch')\n",
    "plt.errorbar(['SW-Agree'], [ConfSWAgree.mean()], yerr=[ConfSWAgree.std()], fmt='--o',color = '#101010',linewidth=7,label='Switch std')\n",
    "plt.plot(axis[0:15],ConfSWAgree[0:15],'bo',color = '#cccbcb',markersize=3)\n",
    "# plt.bar( ['Switch'],[ConfSwitch_1T.mean()],color = '#95bfff',label='Switch')\n",
    "plt.plot(axis1[0:15],ConfNSWAgree[0:15],'bo',color = '#cccbcb',markersize=3)\n",
    "plt.bar( ['NSW-Agree'],[ConfNSWAgree.mean()],color = '#ce7752',label='Not Switch')\n",
    "plt.errorbar(['NSW-Agree'], [ConfNSWAgree.mean()], yerr=[ConfNSWAgree.std()], fmt='--o',color = '#101010',linewidth=7,label='Not Switch std')\n",
    "# plt.axhline((Conf.mean()),c=\"r\")\n",
    "plt.legend(loc=\"lower center\", bbox_to_anchor=(0.5, 1.15), ncol=2)\n",
    "plt.suptitle('P(Switch) in agreement ')\n",
    "plt.ylabel('Confidence')\n",
    "plt.xlabel('Condition')\n",
    "plt.savefig('plotnew1.png', dpi=300, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1ade468d518>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.bar( ['1 err'],[temp1R.mean()],color = '#a6c7f9',label='Switch 1-T')\n",
    "plt.bar( ['2 err'],[temp2R.mean()],color = '#88b5fa',label='Switch 2-T')\n",
    "plt.bar( ['3 err'],[temp3R.mean()],color = '#6696de',label='Switch 3-T')\n",
    "plt.bar( ['4 err'],[temp4R.mean()],color = '#5d83be',label='Switch 4-T')\n",
    "# plt.bar( ['5 err'],[temp5R.mean()],color = '#456699',label='Total 5-T')\n",
    "# plt.bar( ['6 err'],[temp6R.mean()],color = '#222899',label='Total 6-T')\n",
    "plt.bar( ['1 err'],[temp11R.mean()],color = '#111123',label='Not Switch 1-T')\n",
    "plt.bar( ['2 err'],[temp12R.mean()],color = '#111123',label='Not Switch 2-T')\n",
    "plt.bar( ['3 err'],[temp13R.mean()],color = '#111123',label='Not Switch 3-T')\n",
    "plt.bar( ['4 err'],[temp14R.mean()],color = '#111123',label='Not Switch 4-T')\n",
    "# plt.bar( ['5 err'],[temp14R[2]],color = '#111123',label='Switch 5-T')\n",
    "# plt.bar( ['6 err'],[temp16R.mean()],color = '#111123',label='Switch 6-T')\n",
    "plt.axhline(Conf.mean(),c=\"r\",label='mean overall onfidence')\n",
    "plt.suptitle('All  Subject')\n",
    "plt.ylabel('Confidence')\n",
    "plt.xlabel('Consecutive errors')\n",
    "plt.legend(loc=\"lower center\", bbox_to_anchor=(0.5, 1.15), ncol=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3501"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(temp4R)+len(temp2R)+len(temp1R)+len(temp3R)+len(temp14R)+len(temp12R)+len(temp11R)+len(temp13R)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "monans=[]\n",
    "monConf=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "for i in range (len(temp4R)):\n",
    "#     if Switch[i]==1:\n",
    "        monans.append(1)\n",
    "        monConf.append(temp4R[i])\n",
    "for i in range (len(temp14R)):\n",
    "        monans.append(0)\n",
    "        monConf.append(temp14R[i])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "monans=np.array(monans)\n",
    "monConf=np.array(monConf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3501"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(monConf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.039790404453905,\n",
       " 0.39917762858650346,\n",
       " 0.14446081909648298,\n",
       " 0.9359023342976179]"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist4[9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9449993632079758"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist4[1][-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9449993632079758"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist4[1][3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=[]\n",
    "a1=[]\n",
    "a2=[]\n",
    "b=[]\n",
    "newans=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "for j in range (len(hist2)):\n",
    "    a.append(hist2[j][-2])\n",
    "#     a1.append(hist2[j][1])\n",
    "#     a2.append(hist2[j][2])\n",
    "    b.append(hist2[j][-1])\n",
    "    newans.append(1)\n",
    "for j in range (len(hist12)):\n",
    "    a.append(hist12[j][-2])\n",
    "#     a1.append(hist14[j][1])\n",
    "#     a2.append(hist14[j][2])\n",
    "    b.append(hist12[j][-1])\n",
    "    newans.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "pos=[]\n",
    "neg=[]\n",
    "for j in range (len(hist2)+len(hist12)):\n",
    "    pos.append(a[j]+b[j])\n",
    "#     a1.append(hist2[j][1])\n",
    "#     a2.append(hist2[j][2])\n",
    "    neg.append(a[j]-b[j])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "   \n",
    "a = np.array(a)\n",
    "pos = np.array(pos)\n",
    "neg = np.array(neg)\n",
    "b = np.array(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      ConfT_1 ConfT_2 ConfT_3   ConfT_4  ans_coh\n",
      "0    1.188072     NaN     NaN -0.745956        1\n",
      "1    1.043975     NaN     NaN  0.154649        1\n",
      "2    0.733221     NaN     NaN -0.218329        1\n",
      "3    1.871805     NaN     NaN  0.254717        1\n",
      "4    1.726252     NaN     NaN -0.382075        1\n",
      "..        ...     ...     ...       ...      ...\n",
      "875  0.883952     NaN     NaN -0.268580        0\n",
      "876  0.712060     NaN     NaN -0.182635        0\n",
      "877  0.712060     NaN     NaN  0.397499        0\n",
      "878  1.453342     NaN     NaN  0.042973        0\n",
      "879  1.637266     NaN     NaN -0.204121        0\n",
      "\n",
      "[880 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "candidates = {\n",
    "              'ConfT_1':pos ,\n",
    "#               'ConfT_2': a2,\n",
    "#               'ConfT_3': a1,\n",
    "              'ConfT_4': neg,\n",
    "              'ans_coh': newans\n",
    "              }\n",
    "\n",
    "df = pd.DataFrame(candidates,columns= [ 'ConfT_1','ConfT_2','ConfT_3','ConfT_4','ans_coh'])\n",
    "print (df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "220\n",
      "660\n",
      "Accuracy:  0.7363636363636363\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\program files\\python35\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import metrics\n",
    "import seaborn as sn\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# candidates = {'gmat': [780,750,690,710,680,730,690,720,740,690,610,690,710,680,770,610,580,650,540,590,620,600,550,550,570,670,660,580,650,660,640,620,660,660,680,650,670,580,590,690],\n",
    "#               'gpa': [4,3.9,3.3,3.7,3.9,3.7,2.3,3.3,3.3,1.7,2.7,3.7,3.7,3.3,3.3,3,2.7,3.7,2.7,2.3,3.3,2,2.3,2.7,3,3.3,3.7,2.3,3.7,3.3,3,2.7,4,3.3,3.3,2.3,2.7,3.3,1.7,3.7],\n",
    "#               'work_experience': [3,4,3,5,4,6,1,4,5,1,3,5,6,4,3,1,4,6,2,3,2,1,4,1,2,6,4,2,6,5,1,2,4,6,5,1,2,1,4,5],\n",
    "#               'admitted': [1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,0,1,1,1,0,0,0,0,1]\n",
    "#               }\n",
    "\n",
    "# df = pd.DataFrame(candidates,columns= ['gmat', 'gpa','work_experience','admitted'])\n",
    "\n",
    "#print (df)\n",
    "\n",
    "X = df[[ 'ConfT_1','ConfT_4']]\n",
    "y = df['ans_coh']\n",
    "\n",
    "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=0)\n",
    "print(len(y_test))\n",
    "print(len(y_train))\n",
    "logistic_regression= LogisticRegression()\n",
    "logistic_regression.fit(X_train,y_train)\n",
    "y_pred=logistic_regression.predict(X_test)\n",
    "\n",
    "confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])\n",
    "sn.heatmap(confusion_matrix, annot=True)\n",
    "\n",
    "print('Accuracy: ',metrics.accuracy_score(y_test, y_pred))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "const      4.407242e-01\n",
      "ConfT_1    4.907779e-09\n",
      "ConfT_4    1.574405e-06\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\program files\\python35\\lib\\site-packages\\numpy\\core\\fromnumeric.py:2542: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Logit Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>ans_coh</td>     <th>  No. Observations:  </th>  <td>   660</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                 <td>Logit</td>      <th>  Df Residuals:      </th>  <td>   657</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                 <td>MLE</td>       <th>  Df Model:          </th>  <td>     2</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Thu, 05 May 2022</td> <th>  Pseudo R-squ.:     </th>  <td>0.1034</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>11:19:38</td>     <th>  Log-Likelihood:    </th> <td> -328.77</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>converged:</th>             <td>True</td>       <th>  LL-Null:           </th> <td> -366.68</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>  LLR p-value:       </th> <td>3.417e-17</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "     <td></td>        <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>   <td>   -0.1661</td> <td>    0.215</td> <td>   -0.771</td> <td> 0.441</td> <td>   -0.588</td> <td>    0.256</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ConfT_1</th> <td>    1.1499</td> <td>    0.197</td> <td>    5.850</td> <td> 0.000</td> <td>    0.765</td> <td>    1.535</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ConfT_4</th> <td>   -1.1220</td> <td>    0.234</td> <td>   -4.802</td> <td> 0.000</td> <td>   -1.580</td> <td>   -0.664</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                           Logit Regression Results                           \n",
       "==============================================================================\n",
       "Dep. Variable:                ans_coh   No. Observations:                  660\n",
       "Model:                          Logit   Df Residuals:                      657\n",
       "Method:                           MLE   Df Model:                            2\n",
       "Date:                Thu, 05 May 2022   Pseudo R-squ.:                  0.1034\n",
       "Time:                        11:19:38   Log-Likelihood:                -328.77\n",
       "converged:                       True   LL-Null:                       -366.68\n",
       "Covariance Type:            nonrobust   LLR p-value:                 3.417e-17\n",
       "==============================================================================\n",
       "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         -0.1661      0.215     -0.771      0.441      -0.588       0.256\n",
       "ConfT_1        1.1499      0.197      5.850      0.000       0.765       1.535\n",
       "ConfT_4       -1.1220      0.234     -4.802      0.000      -1.580      -0.664\n",
       "==============================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "\n",
    "sm_model = sm.Logit(y_train, sm.add_constant(X_train)).fit(disp=0)\n",
    "print(sm_model.pvalues)\n",
    "sm_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rc('figure', figsize=(8, 3))\n",
    "#plt.text(0.01, 0.05, str(model.summary()), {'fontsize': 12}) old approach\n",
    "plt.text(0, 0, str(sm_model.summary()), {'fontsize': 10}, fontproperties = 'monospace') # approach improved by OP -> monospace!\n",
    "plt.axis('off')\n",
    "plt.tight_layout()\n",
    "plt.savefig('output9.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
