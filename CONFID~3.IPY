{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "Coh_ans=np.load('Coh_ans.npy')\n",
    "RT=np.load('RT.npy')\n",
    "Switch=np.load('Switch (Zero-one).npy')\n",
    "motion=np.load('motion.npy')\n",
    "ans=np.load('Total_ans.npy')\n",
    "Coh=np.load('Coh.npy')\n",
    "Conf=np.load('Conf.npy')\n",
    "# ans2=np.load('total_answerI.npy')\n",
    "Envans=np.load('Envans.npy')\n",
    "envexp=np.load('envexp.npy')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 0 0 0 0]\n",
      "[ True False False False  True  True  True]\n",
      "[ 0.   3.2  3.2  3.2  3.2 51.2  0. ]\n",
      "[ 1  1 -1 -1 -1 -1 -1]\n",
      "[-1 -1 -1 -1 -1 -1 -1]\n"
     ]
    }
   ],
   "source": [
    "i=76-3\n",
    "j=76+4\n",
    "ans [i:j]\n",
    "print(Switch[i:j])\n",
    "print(ans [i:j])\n",
    "print(Coh [i:j])\n",
    "print(Envans [i:j])\n",
    "print(envexp [i:j])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "913"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp1R=[]\n",
    "for i in range (len(ans )-1):\n",
    "    if (ans [i-1]==True and ans [i]==False and Switch[i+1]==1 ):\n",
    "        temp1R.append(Conf [i])\n",
    "temp1R=np.array(temp1R)\n",
    "len(temp1R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1321"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp11R=[]\n",
    "for i in range (len(ans )-1):\n",
    "    if (ans [i-1]==True and ans [i]==False and Switch[i]==0 and Switch[i+1]==0 ):\n",
    "        temp11R.append(Conf [i])\n",
    "temp11R=np.array(temp11R)\n",
    "len(temp11R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "663"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp2R=[]\n",
    "hist2=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-2]==True and ans [i-1]==False and ans [i]==False and Switch[i+1]==1 ):\n",
    "#         print(i , Coh [i])\n",
    "        temp2R.append(Conf[i])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist2.append(ts)\n",
    "temp2R=np.array(temp2R)\n",
    "len(hist2)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "217"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp12R=[]\n",
    "for i in range (len(ans )-1):\n",
    "    if (ans [i-2]==True and ans [i-1]==False  and ans [i]==False and Switch[i-1]==0 and Switch[i]==0  and Switch[i+1]==0):\n",
    "#         print(i , Coh [i])\n",
    "        temp12R.append(Conf[i])\n",
    "temp12R=np.array(temp12R)\n",
    "len(temp12R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "246"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp3R=[]\n",
    "hist3=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-3]==True and ans [i-2]==False and ans [i-1]==False and ans [i]==False and Switch[i+1]==1 ):\n",
    "        temp3R.append(Conf[i])\n",
    "        ts.append(Conf[i-2])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist3.append(ts)\n",
    "temp3R=np.array(temp3R)\n",
    "len(hist3)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp13R=[]\n",
    "for i in range (len(ans )-1):\n",
    "    if (ans [i-3]==True and ans [i-2]==False and ans [i-1]==False  and ans [i]==False and Switch[i-2]==0 and Switch[i-1]==0 and Switch[i]==0   and Switch[i+1]==0  ):\n",
    "        temp13R.append(Conf[i])\n",
    "temp13R=np.array(temp13R)\n",
    "len(temp13R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "96"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp4R=[]\n",
    "hist4=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-4]==True and ans [i-3]==False and ans [i-2]==False and ans [i-1]==False and ans [i]==False and Switch[i+1]==1 ):\n",
    "        temp4R.append(Conf[i])\n",
    "        ts.append(Conf[i-3])\n",
    "        ts.append(Conf[i-2])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist4.append(ts)\n",
    "temp4R=np.array(temp4R)\n",
    "len(temp4R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp14R=[]\n",
    "\n",
    "for i in range (len(ans )-1):\n",
    "    \n",
    "    if (ans [i-4]==True and ans [i-3]==False  and ans [i-2]==False and ans [i-1]==False  and ans [i]==False and Switch[i-3]==0 and Switch[i-2]==0 and Switch[i-1]==0 and Switch[i]==0   and Switch[i+1]==0 ):\n",
    "        temp14R.append(Conf[i])\n",
    "temp14R=np.array(temp14R)\n",
    "len(temp14R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "42"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp5R=[]\n",
    "hist5=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-5]==True and ans [i-4]==False and ans [i-3]==False and ans [i-2]==False and ans [i-1]==False and ans [i]==False and Switch[i+1]==1 ):\n",
    "        temp5R.append(Conf[i])\n",
    "        ts.append(Conf[i-4])\n",
    "        ts.append(Conf[i-3])\n",
    "        ts.append(Conf[i-2])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist5.append(ts)\n",
    "temp5R=np.array(temp5R)\n",
    "len(hist5)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp15R=[]\n",
    "for i in range (len(ans )-1):\n",
    "    if (ans [i-5]==True and ans [i-4]==False and ans [i-3]==False  and ans [i-2]==False and ans [i-1]==False  and ans [i]==False and Switch[i-4]==0 and Switch[i-3]==0 and Switch[i-2]==0 and Switch[i-1]==0 and Switch[i]==0   and Switch[i+1]==0 ):\n",
    "        temp15R.append(Conf[i])\n",
    "temp15R=np.array(temp15R)\n",
    "len(temp15R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp6R=[]\n",
    "hist6=[]\n",
    "for i in range (len(ans )-1):\n",
    "    ts=[]\n",
    "    if (ans [i-6]==True and ans [i-5]==False and ans [i-4]==False and ans [i-3]==False and ans [i-2]==False and ans [i-1]==False and ans [i]==False and Switch[i+1]==1 ):\n",
    "        temp6R.append(Conf[i])\n",
    "        ts.append(Conf[i-5])\n",
    "        ts.append(Conf[i-4])\n",
    "        ts.append(Conf[i-3])\n",
    "        ts.append(Conf[i-2])\n",
    "        ts.append(Conf[i-1])\n",
    "        ts.append(Conf[i])\n",
    "        hist6.append(ts)\n",
    "temp6R=np.array(temp6R)\n",
    "len(hist6)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp16R=[]\n",
    "for i in range (len(ans )-1):\n",
    "    if (ans [i-6]==True and ans [i-5]==False  and ans [i-4]==False and ans [i-3]==False  and ans [i-2]==False and ans [i-1]==False  and ans [i]==False and Switch[i-5]==0  and Switch[i-4]==0 and Switch[i-3]==0 and Switch[i-2]==0 and Switch[i-1]==0 and Switch[i]==0   and Switch[i+1]==0 ):\n",
    "        temp16R.append(Conf[i])\n",
    "temp16R=np.array(temp16R)\n",
    "len(temp16R)\n",
    "# temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5752706320293941"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist2=np.array(hist2)\n",
    "hist2.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7602288522930466"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp6R.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6445092776279774"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp5R.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6373809569399129"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp4R.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6317604591867609"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp3R.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6745509526001845"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp2R.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6862125481265247"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp1R.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "943.6591304347826"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RT.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.43290019127394197"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp11R.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4103259461658677"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp12R.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3088295552027471"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp13R.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.035071155439702725"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.sem(temp4R)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.bar( ['1 err'],[temp1R.mean()],color = '#4df3dd',label='Switch 1-T')\n",
    "plt.errorbar(['1 err'], [temp1R.mean()], yerr=[stats.sem(temp1R)], fmt='--',color = '#000000',linewidth=2)\n",
    "plt.bar( ['2 err'],[temp2R.mean()],color = '#55f34d',label='Switch 2-T')\n",
    "plt.errorbar(['2 err'], [temp2R.mean()], yerr=[stats.sem(temp2R)], fmt='--',color = '#000000',linewidth=2)\n",
    "plt.bar( ['3 err'],[temp3R.mean()],color = '#ebde2f',label='Switch 3-T')\n",
    "plt.errorbar(['3 err'], [temp3R.mean()], yerr=[stats.sem(temp3R)], fmt='--',color = '#000000',linewidth=2)\n",
    "plt.bar( ['4 err'],[temp4R.mean()],color = '#eb4b2f',label='Switch 4-T')\n",
    "plt.errorbar(['4 err'], [temp4R.mean()], yerr=[stats.sem(temp4R)], fmt='--',color = '#000000',linewidth=2)\n",
    "# plt.bar( ['5 err'],[temp5R.mean()],color = '#456699',label='Total 5-T')\n",
    "# plt.bar( ['6 err'],[temp6R.mean()],color = '#222899',label='Total 6-T')\n",
    "plt.bar( ['1 err'],[temp11R.mean()],color = '#216a61',label='Not Switch 1-T')\n",
    "plt.errorbar(['1 err'], [temp11R.mean()], yerr=[stats.sem(temp11R)], fmt='--',color = '#000000',linewidth=2)\n",
    "plt.bar( ['2 err'],[temp12R.mean()],color = '#235720',label='Not Switch 2-T')\n",
    "plt.errorbar(['2 err'], [temp12R.mean()], yerr=[stats.sem(temp12R)], fmt='--',color = '#000000',linewidth=2)\n",
    "plt.bar( ['3 err'],[temp13R.mean()],color = '#544f12',label='Not Switch 3-T')\n",
    "plt.errorbar(['3 err'], [temp13R.mean()], yerr=[stats.sem(temp13R)], fmt='--',color = '#000000',linewidth=2)\n",
    "plt.bar( ['4 err'],[temp14R.mean()],color = '#662216',label='Not Switch 4-T')\n",
    "plt.errorbar(['4 err'], [temp14R.mean()], yerr=[stats.sem(temp14R)], fmt='--',color = '#000000',linewidth=2,label='SEM')\n",
    "# plt.bar( ['5 err'],[temp14R[2]],color = '#111123',label='Switch 5-T')\n",
    "# plt.bar( ['6 err'],[temp16R.mean()],color = '#111123',label='Switch 6-T')\n",
    "plt.axhline(Conf.mean(),color = '#888888',label='mean overall onfidence')\n",
    "plt.suptitle('All  Subject')\n",
    "# plt.ylim(0,1)\n",
    "plt.ylabel('Confidence')\n",
    "plt.xlabel('Consecutive errors')\n",
    "plt.legend(loc=\"lower center\", bbox_to_anchor=(0.5, 1.15), ncol=2)\n",
    "plt.savefig('plotnew1.png', dpi=300, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ranksums test : stat=-20.875, p=0.00000\n",
      "It is Significant\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import ranksums\n",
    "stat, p =ranksums(temp11R, temp1R)\n",
    "print('Ranksums test : stat=%.3f, p=%.5f' % (stat, p))\n",
    "if p > 0.05:\n",
    "\tprint('it is  Not Significant')\n",
    "else:\n",
    "\tprint('It is Significant' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=[]\n",
    "a2=[]\n",
    "a1=[]\n",
    "b=[]\n",
    "for j in range (len(hist4)):\n",
    "    a.append(hist4[j][0])\n",
    "    a1.append(hist4[j][1])\n",
    "    a2.append(hist4[j][2])\n",
    "    b.append(hist4[j][-1])\n",
    "    \n",
    "a = np.array(a)\n",
    "a2 = np.array(a2)\n",
    "a1 = np.array(a1)\n",
    "b = np.array(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=[]\n",
    "a1=[]\n",
    "b=[]\n",
    "for j in range (len(hist3)):\n",
    "    a.append(hist3[j][0])\n",
    "    a1.append(hist3[j][1])\n",
    "#     a.append(hist3[j][2])\n",
    "    b.append(hist3[j][-1])\n",
    "    \n",
    "a = np.array(a)\n",
    "a1 = np.array(a1)\n",
    "b = np.array(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=[]\n",
    "a1=[]\n",
    "b=[]\n",
    "for j in range (len(hist2)):\n",
    "    a.append(hist2[j][0])\n",
    "#     a1.append(hist3[j][1])\n",
    "#     a.append(hist3[j][2])\n",
    "    b.append(hist2[j][-1])\n",
    "    \n",
    "a = np.array(a)\n",
    "# a1 = np.array(a1)\n",
    "b = np.array(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ranksums test : stat=-13.731, p=0.00000\n",
      "It is Significant\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import ranksums\n",
    "stat, p =ranksums(a, b)\n",
    "print('Ranksums test : stat=%.3f, p=%.5f' % (stat, p))\n",
    "if p > 0.05:\n",
    "\tprint('it is  Not Significant')\n",
    "else:\n",
    "\tprint('It is Significant' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " stat=-13.731, p=0.00000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2358be974a8>"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar( ['4 trials before'],[a1.mean()],color = '#4df3dd',label='mean of  T-4')\n",
    "plt.errorbar(['4 trials before'], [a1.mean()], yerr=[stats.sem(a1)], fmt='--',color = '#000000',linewidth=2)\n",
    "plt.bar( ['3 trials before'],[a1.mean()],color = '#55f34d',label='mean of  T-3')\n",
    "plt.errorbar(['3 trials before'], [a1.mean()], yerr=[stats.sem(a1)], fmt='--',color = '#000000',linewidth=2)\n",
    "plt.bar( ['2 trials before'],[a.mean()],color = '#ebde2f',label='mean of  T-2')\n",
    "plt.errorbar(['2 trials before'], [a.mean()], yerr=[stats.sem(a)], fmt='--',color = '#000000',linewidth=2)\n",
    "plt.bar( ['1 trials before'],[b.mean()],color = '#eb4b2f',label='mean of  T-1')\n",
    "plt.errorbar(['1 trials before'], [b.mean()], yerr=[stats.sem(b)], fmt='--',color = '#000000',linewidth=2,label='SEM')\n",
    "plt.axhline(Conf.mean(),color = '#888888',label='mean overall onfidence')\n",
    "# plt.suptitle('Trials that switched')\n",
    "\n",
    "plt.ylabel('Confidence')\n",
    "plt.xlabel('4 Consecutive errors')\n",
    "plt.legend(loc=\"lower center\", bbox_to_anchor=(0.5, 1.15), ncol=2)\n",
    "# plt.savefig('plotnew4.png', dpi=300, bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
